'use strict';

/* Colors */

const COLOR_BLACK = 'black';
const COLOR_BLUE = 'blue';
const COLOR_ORANGE = 'orange';
const COLOR_WHITE = 'white';
const COLOR_LIGHT_GREY = '#CCC';


/* Sizes (in pixels) */

const GRID_WIDTH = 1200; // default: 1200 (pixels)
const GRID_HEIGHT = 800; // default: 800 (pixels)
const CELL_SIZE = 10; // default: 10 (pixels)


/* Sizes (in cells) */

const CELLS_IN_ROW = Math.floor(GRID_WIDTH / CELL_SIZE);
const CELLS_IN_COL = Math.floor(GRID_HEIGHT / CELL_SIZE);
// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ (–≤–æ–æ–±—â–µ –≤—Å–µ—Ö, –¥–∞–∂–µ –ø—É—Å—Ç—ã—Ö)
const CELLS_ALL = CELLS_IN_ROW * CELLS_IN_COL;


/* Cells States Matrices */

// matrix of current cell generation 
let cellMatrix = new Uint8Array(CELLS_ALL);
// matrix of next cell generation
let nextMatrix = new Uint8Array(CELLS_ALL);


/* Generation history for current game */

// aliveCells -> array of matching generation objects with the same amount of alive cells: [{ generation: 0, matrix: [1, 0, 1, ..., 1] }, ...]
let generationsMap = new Map();


/* Pattern storage */

let patternStorage = {
  // initial pattern for current game (id changes when user selects a new pattern)
  initial: { id: null, aliveCells: 0, matrix: new Uint8Array() },
  // custom pattern for current game
  custom: { id: 'custom', aliveCells: 0, matrix: new Uint8Array(), cellsInRow: CELLS_IN_ROW, cellsInCol: CELLS_IN_COL },


  /* Figures */

  blinker: { id: 'blinker', aliveCells: 5, matrix: new Uint8Array([0, 1, 0, 0, 1, 0, 0, 1, 0]), cellsInRow: 3, cellsInCol: 3 },
  glider: { id: 'glider', aliveCells: 5, matrix: new Uint8Array([0, 1, 0, 0, 0, 1, 1, 1, 1]), cellsInRow: 3, cellsInCol: 3 },
  star: { id: 'star', aliveCells: 5, matrix: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), cellsInRow: 13, cellsInCol: 13 },
  cross: { id: 'cross', aliveCells: 5, matrix: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), cellsInRow: 10, cellsInCol: 10 },
  'french-kiss': { id: 'french-kiss', aliveCells: 5, matrix: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0]), cellsInRow: 9, cellsInCol: 10 },
};


// Alive Cells Counter
let aliveCells = 0;


// Game states
let gameStates = {
  init: 'creating initial pattern',
  isRunning: 'running',
  paused: 'paused',
  over: 'game over'
};

// Current game state
let gameState;


// 'Game over' reasons
let gameOverReasons = {
  noAliveCells: 'no alive cells', // –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–ª–µ—Ç–æ–∫ –Ω–µ –±—ã–ª–æ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞
  cellsDied: 'all cells died',
  samePattern: 'the same pattern was already',
  samePatternShort: 'same pattern',
};


// Game Timer id
let gameTimerId;


// Delay (milliseconds)
let delay = 50; // default: 50
document.querySelector('#slider-delay').value = delay;
document.querySelector('#delay-value').innerHTML = `${ delay } ms`;


// Generation
let generation = 0;


/* Modal window (show game messages) */
let modal = document.querySelector('#modal');
let modalTitle = document.querySelector('#modal-title');
let modalContent = document.querySelector('#modal-content');


/* Helpful */

let customPattern;
let endlessGame = false;





/*******************************
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ *
 *******************************/


/* Canvas */

const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');

canvas.width = GRID_WIDTH + 1;
canvas.height = GRID_HEIGHT + 1;


/* Mouse events */

let isDrawing = false;
let isRemoving = false;


/**
 * –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø–æ –ü–ö–ú –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ
 */
canvas.oncontextmenu = function (e) {
  e.preventDefault();
};

canvas.addEventListener('mousedown', function(e) {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤ —Ç–∞–∫–æ–º —Ä–µ–∂–∏–º–µ —Ä–∏—Å–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –Ω–µ–ª—å–∑—è
  const showCantDrawModal = () => {
    showModal('Nice try!', `
      <p class="mb-10">Ha-ha! Nice try, my dear player üòÑ!</p>
      <p class="mb-10">But <strong>you can't draw in normal mode</strong>!</p>
      ${ gameState === gameStates.paused ? '<p class="mb-20">Yes, yes, you are playing right now, despite the fact that the game is paused.</p><p class="mb-10 blue">By the way, even if you do not start the game using the <strong>"Play/Pause"</strong> button,</p><p class="mb-20 blue">the game can start and immediately pause itself automatically when you press the <strong>"Next Gen"</strong> button.</p>' : '' }
      <p class="mb-10">The next time you want to draw, just check the <strong>"Endless game"</strong> checkbox before starting the game.</p>
      <p class="mt-20"><strong>‚ù§Ô∏è [Your favorite developer] ‚ù§Ô∏è</strong></p>`
    );
  }

  switch(e.button) {
    case 0: // LMB
      // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –æ–±—ã—á–Ω–æ–º (–Ω–µ–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º) —Ä–µ–∂–∏–º–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤ —Ç–∞–∫–æ–º —Ä–µ–∂–∏–º–µ —Ä–∏—Å–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –Ω–µ–ª—å–∑—è –∏ –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
      if (gameState !== gameStates.init && !endlessGame) { showCantDrawModal(); return; }

      isDrawing = true;
      isRemoving = false;
      drawCell(e);

      break;
    case 2: // RMB
      // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –æ–±—ã—á–Ω–æ–º (–Ω–µ–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º) —Ä–µ–∂–∏–º–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤ —Ç–∞–∫–æ–º —Ä–µ–∂–∏–º–µ —Ä–∏—Å–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –Ω–µ–ª—å–∑—è –∏ –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
      if (gameState !== gameStates.init && !endlessGame) { showCantDrawModal(); return; }

      isDrawing = false;
      isRemoving = true;
      removeCell(e);

      break;
  }
});

canvas.addEventListener('mousemove', function(e) {
  if (isDrawing) drawCell(e);
  if (isRemoving) removeCell(e);
});

canvas.addEventListener('mouseup', function(e) {
  isDrawing = false;
  isRemoving = false;

  if (!aliveCells) document.querySelector('#pattern').value = 'empty'; // Pattern select -> set 'empty' pattern
  else saveCustomPattern();
});





/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã (–Ω–æ–≤–∞—è –∏–≥—Ä–∞)
 */
function init() {
  clearTimeout(gameTimerId);
  generationsMap.clear();

  gameState = gameStates.init;
  aliveCells = 0;
  generation = 0;
  
  updateGameStats('game-state', gameState);
  updateGameStats('alive-cells', aliveCells);
  updateGameStats('gen', generation);

  document.getElementById('play-pause').innerHTML = '‚èµ'; // Play/Pause button -> set 'play' icon
  document.querySelector('#pattern').value = 'empty'; // Pattern select -> set 'empty' pattern
  enableControls('#pattern', '#next-gen', '#play-pause', '#endless-game'); // enable controls -> 'Pattern select', 'Next Gen', 'Play/Pause', 'Endless game'

  clearCanvas();
  drawGrid();
  enterTheMatrix();
};

init();


/**
 * –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç (–∫–∞–Ω–≤–∞—Å)
 */
function clearCanvas() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
}


/**
 * –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
 */
function drawGrid() {
  ctx.beginPath();

  /* –†–∏—Å—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */
  for (let x = 0.5; x <= GRID_WIDTH + 1; x += CELL_SIZE) {
    ctx.moveTo(x, 0);
    ctx.lineTo(x, GRID_HEIGHT);
  }

  /* –†–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */
  for (let x = 0.5; x <= GRID_HEIGHT + 1; x += CELL_SIZE) {
    ctx.moveTo(0, x);
    ctx.lineTo(GRID_WIDTH, x);
  }

  ctx.closePath();
  ctx.strokeStyle = COLOR_LIGHT_GREY; // COLOR_BLACK
  ctx.stroke();
}


/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–µ—Ç–æ–∫
 */
function enterTheMatrix() {
  for (let i = 0; i < CELLS_ALL; i++) {
    /* 0 - unpopulated, 1 - populated */
    cellMatrix[i] = nextMatrix[i] = 0;
  }
}


/**
 * –†–∏—Å—É–µ–º –∫–ª–µ—Ç–∫—É
 */
function drawCell(event, props) {
  /* –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥—è—â–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–æ–≤–æ–π –∂–∏–≤–æ–π –∫–ª–µ—Ç–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —è—á–µ–π–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–µ—Ç–æ–∫ –∏ —Å—á–µ—Ç—á–∏–∫–∞ –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫ */
  const drawer = (topLeftX, topLeftY, index) => {
    drawRect(topLeftX, topLeftY, CELL_SIZE, CELL_SIZE, COLOR_BLUE);
    cellMatrix[index] = 1; // alive
    aliveCells++;
  }

  if (event) { // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–∫–æ–º (–∫–ª–∏–∫ –õ–ö–ú –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏ —Å –∑–∞–∂–∞—Ç–æ–π –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π [—Ä–∏—Å–æ–≤–∞–Ω–∏–µ])
    const coords = getRectCoords(event); // cell rectangle -> top left corner coordinates
    const index = getCellIndexByRectCoords(coords.x, coords.y);

    if (cellMatrix[index] === 0) {
      drawer(coords.x, coords.y, index);
      updateGameStats('alive-cells', aliveCells);
      if (gameState === gameStates.init) document.getElementById('pattern').value = 'custom';
    }
  } else if (props) { // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    const index = props.index;
    const colIndex = getColIndex(index);
    const rowIndex = getRowIndex(index);
    drawer(colIndex * CELL_SIZE, rowIndex * CELL_SIZE, index);
  }
}


/**
 * –£–¥–∞–ª—è–µ–º (—Å—Ç–∏—Ä–∞–µ–º) –∫–ª–µ—Ç–∫—É
 */
function removeCell(event, props) {
  /* –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥—è—â–∞—è —É–¥–∞–ª–µ–Ω–∏–µ (—Å—Ç–∏—Ä–∞–Ω–∏–µ) –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∂–∏–≤–æ–π –∫–ª–µ—Ç–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫ */
  const eraser = (topLeftX, topLeftY, index) => {
    ctx.clearRect(topLeftX + 1, topLeftY + 1, CELL_SIZE - 1, CELL_SIZE - 1);
    cellMatrix[index] = 0; // dead
    aliveCells--;
  }

  if (event) { // —É–¥–∞–ª–µ–Ω–∏–µ (—Å—Ç–∏—Ä–∞–Ω–∏–µ) –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–∫–æ–º (–∫–ª–∏–∫ –ü–ö–ú –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏ —Å –∑–∞–∂–∞—Ç–æ–π –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π [—Ä–∏—Å–æ–≤–∞–Ω–∏–µ])
    const coords = getRectCoords(event); // cell rectangle -> top left corner coordinates
    const index = getCellIndexByRectCoords(coords.x, coords.y);
    if (cellMatrix[index] === 1) {
      eraser(coords.x, coords.y, index);
      updateGameStats('alive-cells', aliveCells);
    }
  } else if (props) { // —É–¥–∞–ª–µ–Ω–∏–µ (—Å—Ç–∏—Ä–∞–Ω–∏–µ) –∫–ª–µ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    const coords = Object.hasOwn(props, 'x') && Object.hasOwn(props, 'y') ? { x: props.x, y: props.y  } : getRectCoordsByCellIndex(index);
    const index = props.index;
    eraser(coords.x, coords.y, index);
  }
}


/**
 * –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é [–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã] –∫—É—Ä—Å–æ—Ä–∞ (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É)
 */
function getCursorPosition(canvas, event) {
  const rect = canvas.getBoundingClientRect();
  const x = Math.abs(event.clientX - rect.left);
  const y = Math.abs(event.clientY - rect.top);

  return { x, y };
}


/**
 * –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∫–ª–µ—Ç–∫–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∫—É—Ä—Å–æ—Ä–∞ (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É)
 */
function getRectCoords(event) {
  const cursorPosition = getCursorPosition(canvas, event);
  const x = cursorPosition.x - cursorPosition.x % CELL_SIZE;
  const y = cursorPosition.y - cursorPosition.y % CELL_SIZE;

  return { x, y };
}


/**
 * –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∫–ª–µ—Ç–∫–∏ –ø–æ –µ–µ –∏–Ω–¥–µ–∫—Å—É –≤ –º–∞—Ç—Ä–∏—Ü–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–µ—Ç–æ–∫
 */
function getRectCoordsByCellIndex(i) {
  const colIndex = getColIndex(i);
  const rowIndex = getRowIndex(i);
  const x = colIndex * CELL_SIZE;
  const y = rowIndex * CELL_SIZE;

  return { x, y };
}


/**
 * –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–ª–µ—Ç–∫–∏ –≤ –º–∞—Ç—Ä–∏—Ü–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–µ—Ç–æ–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∫–ª–µ—Ç–∫–∏
 */
function getCellIndexByRectCoords(topLeftX, topLeftY, cellsInRow = CELLS_IN_ROW) {
  const colIndex = Math.floor(topLeftX / CELL_SIZE);
  const rowIndex = Math.floor(topLeftY / CELL_SIZE);

  return cellsInRow * rowIndex + colIndex;
}


/**
 * –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–ª–µ—Ç–∫–∏ –≤ –º–∞—Ç—Ä–∏—Ü–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–µ—Ç–æ–∫ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞
 */
function getCellIndex(colIndex, rowIndex, cellsInRow = CELLS_IN_ROW) {
  return cellsInRow * rowIndex + colIndex;
}


/**
 * –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∫–ª–µ—Ç–∫–∏
 */
function drawRect(x, y, width, height, color) {
  ctx.beginPath();
  ctx.rect(x + 1, y + 1, width - 1, height - 1);
  ctx.fillStyle = color;
  ctx.closePath();
  ctx.fill();
}


/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–≥—Ä—ã
 */
function nextGen() {
  disableControls('#pattern', '#endless-game'); // disable controls -> 'Pattern select', 'Endless game'

  if (gameState === gameStates.init) {
    // –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ" –Ω–∞–∂–∞—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–ø–æ–∫–æ–ª–µ–Ω–∏–µ 0), —Ç–æ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
    // –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–∏ —ç—Ç–æ–º —Ñ—É–Ω–∫—Ü–∏—è nextGen —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –∏–≥—Ä—ã (–∏–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∏ —Å—Ä–∞–∑—É –ø–æ—Å—Ç–∞–≤–∏—Ç—Å—è –Ω–∞ –ø–∞—É–∑—É)
    gameState = gameStates.paused;
    updateGameStats('game-state', gameState);

    patternStorage.initial.aliveCells = aliveCells; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫
  }

  // –µ—Å–ª–∏ –Ω–µ —Å—Ç–æ–∏—Ç –≥–∞–ª–∫–∞ —á–µ–∫–±–æ–∫—Å–∞ 'Endless game' -> –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ –ø–æ–∫–æ–ª–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—É—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫
  if (!endlessGame) {
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–∫–æ–ª–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ç–∞–∫–æ–µ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫, –∫–∞–∫ –∏ —Ç–µ–∫—É—â–µ–µ
    const matchedGenerations = generationsMap.get(aliveCells) || [];

    // –ö–ª–∞–¥–µ–º –≤ –∫–æ–Ω–µ—Ü —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Ç–µ–∫—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
    matchedGenerations[matchedGenerations.length] = { generation, matrix: new Uint8Array(cellMatrix) };

    // –æ–±–Ω–æ–≤–ª—è–µ–º generationsMap –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –∫–ª—é—á—É (–∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫)
    generationsMap.set(aliveCells, matchedGenerations);
  }

  // –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∫–æ –≤—Å–µ–º –∫–ª–µ—Ç–∫–∞–º
  for (let i = 0; i < CELLS_ALL; i++) {
    applyRules(i);
  }

  clearCanvas();
  drawGrid(); // redraw grid
  drawAliveCells(nextMatrix);
  
  aliveCells = 0;
  cellMatrix = nextMatrix.map(item => {
    if (item === 1) {
      aliveCells++;
    }
  
    return item;
  });

  updateGameStats('alive-cells', aliveCells);
  generation++;
  updateGameStats('gen', generation);

  // –µ—Å–ª–∏ –Ω–µ —Å—Ç–æ–∏—Ç –≥–∞–ª–∫–∞ —á–µ–∫–±–æ–∫—Å–∞ 'Endless game' -> –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ—Ä–∞ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É ('Game over') –∏–∑-–∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª–∞–º–∏ —É—Å–ª–æ–≤–∏–π
  if (!endlessGame) {
    const isGameOver = checkGameOver();
    if (isGameOver) {
      pause(isGameOver);
      disableControls('#play-pause', '#next-gen'); // disable controls -> 'Play/Pause', 'Next Gen'
    }
  }
}


/**
 * –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–ª–µ—Ç–∫–µ –ø–æ –µ–µ –∏–Ω–¥–µ–∫—Å—É –≤ –º–∞—Ç—Ä–∏—Ü–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–µ—Ç–æ–∫
 */
function applyRules(i) {
  const aliveNeighbours = getAliveNeighbours(i);

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã (B3/S23)
  if (cellMatrix[i] === 0) {
    if (aliveNeighbours === 3) {
      nextMatrix[i] = 1; // alive
    }
  }
  else {
    if (aliveNeighbours === 2 || aliveNeighbours === 3) {
      nextMatrix[i] = 1; // alive
    }
    else {
      nextMatrix[i] = 0; // dead
    }
  }

  // –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã (—Ç–µ—Å—Ç)
  // if (cellMatrix[i] === 0) {
  //   if (aliveNeighbours === 3) {
  //     nextMatrix[i] = 1; // alive
  //   }
  // }
  // else {
  //   if (aliveNeighbours >= 2 && aliveNeighbours <= 4) {
  //     nextMatrix[i] = 1; // alive
  //   }
  //   else {
  //    nextMatrix[i] = 0; // dead
  //   }
  // }
}


/**
 * –†–∏—Å—É–µ–º –∂–∏–≤—ã–µ (–≤—ã–∂–∏–≤—à–∏–µ) –∫–ª–µ—Ç–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –º–∞—Ç—Ä–∏—Ü–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–µ—Ç–æ–∫
 */
function drawAliveCells(matrix, pattern) {
  if (matrix.length === cellMatrix.length) { // –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–∏—Å—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –µ–¥–∏–Ω–∏—Ü–∞–º –∫–ª–µ—Ç–∫–∏
    for (let i = 0; i < matrix.length; i++) {
      if (matrix[i] === 1) {      
        drawCell(null, { index: i });
      }
    }
  } else { // –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –ø–æ –æ–±—ä–µ–∫—Ç—É, —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –µ–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    if (pattern && pattern.cellsInRow) {
      const cellsInRow = pattern.cellsInRow;

      for (let i = 0; i < matrix.length; i++) {
        if (matrix[i] === 1) {
          const colIndex = getColIndex(i, cellsInRow);
          const rowIndex = getRowIndex(i, cellsInRow);
          const cellIndex = getCellIndex(colIndex, rowIndex);
          drawCell(null, { index: cellIndex });
        }
      }
    } else { // –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –≤ –Ω–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–≤–æ–π—Å—Ç–≤–∞, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≤ –∫–ª–µ—Ç–∫–∞—Ö ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω
      showModal('Need sizes!', `
        <p class="blue mb-10">Unable to draw pattern with different cell resolution!</p>
        <p>Requires a pattern object with <strong>pattern.cellsInRow</strong> and <strong>pattern.cellsInCol</strong> properties defined.</p>`
      );
    }
  }
}


/**
 * –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –ø–æ –∏–Ω–¥–µ–∫—Å—É —ç—Ç–æ–π –∫–ª–µ—Ç–∫–∏ –≤ –º–∞—Ç—Ä–∏—Ü–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–µ—Ç–æ–∫
 */
function getRowIndex(cellIndex, cellsInRow = CELLS_IN_ROW) {
  return Math.floor(cellIndex / cellsInRow);
}


/**
 * –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –ø–æ –∏–Ω–¥–µ–∫—Å—É —ç—Ç–æ–π –∫–ª–µ—Ç–∫–∏ –≤ –º–∞—Ç—Ä–∏—Ü–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–µ—Ç–æ–∫
 */
function getColIndex(cellIndex, cellsInRow = CELLS_IN_ROW) {
  return cellIndex % cellsInRow;
}


/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ select, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
 */
async function onPatternChange() {
  const selectedPatternId = document.getElementById("pattern").value;
  patternStorage.initial.id = selectedPatternId;
  await drawPattern(selectedPatternId);
}


/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ input[type="checkbox"]
 */
function onCheckboxChange(id, checked) {
  switch(id) {
    case 'endless-game':
      endlessGame = checked;
      break;
  }
}


/**
 * –†–∏—Å—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω (–ø—Ä–∏ –≤—ã–±–æ—Ä–µ 'Random Cells' –∫–ª–µ—Ç–∫–∏ –Ω–∞ –ø–æ–ª–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º)
 */
async function drawPattern(id) {
  await toggleLoader('ON');

  clearCanvas();
  drawGrid();
  enterTheMatrix();
  aliveCells = 0;

  switch (id) {
    case 'empty':
      // –≤—ã—à–µ –∏–¥–µ—Ç –æ—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–≤–∞—Å–∞, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏, –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –Ω—É–ª—è–º–∏, –∏ —Å–±—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫,
      // –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π –ª—é–±–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞, –≤–∫–ª—é—á–∞—è 'Empty', –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
      break;
    case 'custom':
      drawCustom();
      break;
    case 'random-cells':
      drawRandomCells();
      break;
    default:
      drawAliveCells(patternStorage[id].matrix, patternStorage[id]);
  }

  updateGameStats('alive-cells', aliveCells);
  await toggleLoader('OFF');
}


/**
 * –†–∏—Å—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 */
function drawCustom() {
  // load custom pattern from pattern storage
  const customPattern = patternStorage.custom;
  if (customPattern.matrix.length) drawAliveCells(customPattern.matrix);
  else { // load custom pattern from local storage
    const customPatternFromLS = JSON.parse(localStorage.getItem('custom-pattern'));
    if (customPatternFromLS && customPatternFromLS.matrix && customPatternFromLS.matrix.length) {
      if (customPatternFromLS.cellsInRow === CELLS_IN_ROW && customPatternFromLS.cellsInCol === CELLS_IN_COL) {
        drawAliveCells(customPatternFromLS.matrix);
      } else {
        showModal('Different sizes!', `
          <p class="mb-10">Custom pattern from localStorage can't be loaded because it has a different resolution.</p>
          <p class="mb-10">Pattern resolution (width x height) in cells: ${ customPatternFromLS.cellsInRow }&times;${ customPatternFromLS.cellsInCol }</p>
          <p class="mb-10 blue">Current game field resolution (width x height) in cells: ${ CELLS_IN_ROW }&times;${ CELLS_IN_COL }</p>
          <p class="mt-20"><strong>‚ù§Ô∏è [Your favorite developer] ‚ù§Ô∏è</strong></p>`
        );
      }
    }
  }
}


/**
 * –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫ —Å—Ä–µ–¥–∏ 8-–º–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö –æ–∫—Ä—É–∂–∞—é—â–∏—Ö [—Ç–µ–∫—É—â—É—é –∫–ª–µ—Ç–∫—É] –∫–ª–µ—Ç–æ–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É —Ç–µ–∫—É—â–µ–π –∫–ª–µ—Ç–∫–∏.
 */
function getAliveNeighbours(cellIndex) {
  const colIndex = getColIndex(cellIndex);
  const rowIndex = getRowIndex(cellIndex);

  // –ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ 8-–º–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö –æ–∫—Ä—É–∂–∞—é—â–∏—Ö [—Ç–µ–∫—É—â—É—é –∫–ª–µ—Ç–∫—É] –∫–ª–µ—Ç–æ–∫
  const neighbourIndexes = [
    // top left neighbour index
    rowIndex === 0 ? (colIndex === 0 ? CELLS_ALL - 1 : CELLS_ALL - CELLS_IN_ROW + cellIndex - 1) : colIndex === 0 ? cellIndex - 1 : cellIndex - CELLS_IN_ROW - 1,
    // top neighbour index
    rowIndex === 0 ? CELLS_ALL - CELLS_IN_ROW + cellIndex : cellIndex - CELLS_IN_ROW,
    // top right neighbour index
    rowIndex === 0 ? (colIndex === CELLS_IN_ROW - 1 ? CELLS_ALL - CELLS_IN_ROW : CELLS_ALL - CELLS_IN_ROW + cellIndex + 1) : colIndex === CELLS_IN_ROW - 1 ? cellIndex - (CELLS_IN_ROW << 1) + 1 : cellIndex - CELLS_IN_ROW + 1,
    // left neighbour index
    colIndex === 0 ? cellIndex + CELLS_IN_ROW - 1 : cellIndex - 1,
    // right neighbour index
    colIndex === CELLS_IN_ROW - 1 ? cellIndex - CELLS_IN_ROW + 1 : cellIndex + 1,
    // bottom left neighbour index
    rowIndex === CELLS_IN_COL - 1 ? (colIndex === 0 ? cellIndex - CELLS_ALL + (CELLS_IN_ROW << 1) - 1 : cellIndex - (CELLS_ALL - CELLS_IN_ROW) - 1) : colIndex === 0 ? cellIndex + (CELLS_IN_ROW << 1) - 1 : cellIndex + CELLS_IN_ROW - 1,
    // bottom neighbour index
    rowIndex === CELLS_IN_COL - 1 ? cellIndex - (CELLS_ALL - CELLS_IN_ROW) : cellIndex + CELLS_IN_ROW,
    // bottom right neighbour index
    rowIndex === CELLS_IN_COL - 1 ? (colIndex === CELLS_IN_ROW - 1 ? 0 : cellIndex - (CELLS_ALL - CELLS_IN_ROW) + 1 ) : colIndex === CELLS_IN_ROW - 1 ? cellIndex + 1 : cellIndex + CELLS_IN_ROW + 1
  ];

  // –ú–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π (1 - alive, 0 - dead) 8-–º–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö –æ–∫—Ä—É–∂–∞—é—â–∏—Ö [—Ç–µ–∫—É—â—É—é –∫–ª–µ—Ç–∫—É] –∫–ª–µ—Ç–æ–∫ (—Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑).
  // –ù–∞–ø—Ä–∏–º–µ—Ä: const neighbourStates = [1,0,1,1,0,0,1,1]; // [<topLeft>, <top>, <topRight>, <left>, <right>, <bottomLeft>, <bottom>, <bottomRight>].
  const neighbourStates = [
    cellMatrix[neighbourIndexes[0]],
    cellMatrix[neighbourIndexes[1]],
    cellMatrix[neighbourIndexes[2]],
    cellMatrix[neighbourIndexes[3]],
    cellMatrix[neighbourIndexes[4]],
    cellMatrix[neighbourIndexes[5]],
    cellMatrix[neighbourIndexes[6]],
    cellMatrix[neighbourIndexes[7]]
  ];
  
  let aliveNeighboursCount = 0;
  
  for (let state of neighbourStates) {
    if (state === 1) {
      aliveNeighboursCount++;
    }
  }
  
  return aliveNeighboursCount;
}


/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–µ—Ç–∫–∏ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
 */
function drawRandomCells() {
  for (let i = 0; i < CELLS_ALL; i++) {
    if (getRandomInt(0, 2) === 1) {
      const colIndex = getColIndex(i);
      const rowIndex = getRowIndex(i);
      drawCell(null, { x: colIndex * CELL_SIZE, y: rowIndex * CELL_SIZE, index: i });
    }
  }
}


/**
 * –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [min, max]
 */
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}


/**
 * –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */
function updateGameStats(elementId, value) {
  let label;
  switch (elementId) {
    case 'game-state':
      label = 'Game state';
      break;
    case 'alive-cells':
      label = 'Alive cells';
      break;
    case 'gen':
      label = 'Generation';
      break;
  };

  document.getElementById(elementId).innerHTML = `<strong>${ label }:</strong> ${ value }`;
}


/**
 * –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏–≥—Ä–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ [—Å–º. setTimeout –≤ —Ñ—É–Ω–∫—Ü–∏–∏ playpause] (–º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã)
 */
function updateDelay(milliseconds) {
  delay = milliseconds;
  document.querySelector('#delay-value').innerHTML = `${ delay } ms`;
}


/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
 */
async function toggleLoader(state) {
  const loader = document.getElementById('loader');
  loader.style.visibility = state === 'ON' ? 'visible' : 'hidden';
  await sleep(1);
}


/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω, –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 */
function saveCustomPattern() {
  patternStorage.custom.matrix = new Uint8Array(cellMatrix);
  patternStorage.custom.aliveCells = aliveCells;
  localStorage.setItem('custom-pattern', JSON.stringify({ ...patternStorage.custom, matrix: [...cellMatrix] }));
}


/**
 * Play
 */
function play() {
  disableControls('#pattern', '#endless-game'); // disable controls -> 'Pattern select', 'Endless game',
  patternStorage.initial.aliveCells = aliveCells; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫
  gameState = gameStates.isRunning;
  document.getElementById('play-pause').innerHTML = '‚è∏'; // Pause
  updateGameStats('game-state', gameState);
  gameTimerId = setTimeout(function tick() {
    nextGen();
    if (gameState !== gameStates.over) gameTimerId = setTimeout(tick, delay);
  }, delay);
}


/**
 * Pause
 */
function pause(isGameOver) {
  disableControls('#pattern'); // pattern select -> disabled
  if (!isGameOver) gameState = gameStates.paused;
  document.getElementById('play-pause').innerHTML = '‚èµ'; // Play
  if (!isGameOver) updateGameStats('game-state', gameState);
  clearTimeout(gameTimerId);
}


/**
 * Play / Pause
 */
function playpause() {
  gameState === gameStates.isRunning ? pause() : play();
}


/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞ –∏ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–∫, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
 */
function checkGameOver() {
  const showGameOverModal = (gameOverReason, gameOverReasonShort) => {
    gameState = gameStates.over;
    updateGameStats('game-state', `${ gameStates.over } (${ gameOverReasonShort || gameOverReason })`);
    showModal('Game over!', `
      <p><strong>${ capitalizeFirstLetter(gameOverReason) }!<strong></p>`);
  };

  // –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫
  if (!aliveCells) {
    const gameOverReason = !patternStorage.initial.aliveCells ? gameOverReasons.noAliveCells : gameOverReasons.cellsDied;
    showGameOverModal(gameOverReason);
    return true;
  } else { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    const samePatternGen = getGenerationWithSamePattern(cellMatrix);
    if (!samePatternGen) return false;

    const gameOverReason = `${ gameOverReasons.samePattern } in generation ${ samePatternGen.generation }`;
    const gameOverReasonShort = gameOverReasons.samePatternShort;
    showGameOverModal(gameOverReason, gameOverReasonShort);
    return true;
  }

  return false;
}


/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–∏–≤—à–∏–π—Å—è –∏–≥—Ä–æ–≤–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ–¥–Ω–∏–º –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π —Å —Ç–µ–º –∂–µ
 * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏.
 */
function getGenerationWithSamePattern(matrix) {
  let matchedGenerations = generationsMap.get(aliveCells) || [];
  for (let gen of matchedGenerations) {
    let isSameMatrix = true; // –Ω–∞–∏–≤–Ω–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –Ω–∞ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç—Ä–∏—Ü–∞ ‚Äî —ç—Ç–æ —Ç–∞ –∂–µ —Å–∞–º–∞—è –º–∞—Ç—Ä–∏—Ü–∞, —á—Ç–æ –∏ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏ –∫–ª–µ—Ç–æ–∫
    
    for (let i = 0; i < CELLS_ALL; i++) {
      // –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∂–µ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ -> –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–∞ –∂–µ —Å–∞–º–∞—è –º–∞—Ç—Ä–∏—Ü–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –µ–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –º–∞—Ç—Ä–∏—Ü–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫
      if (gen.matrix[i] !== matrix[i]) { isSameMatrix = false; break; }
    }

    if (isSameMatrix) return gen;
  }
}


/* –û—Ç–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–≥—Ä—ã) */
function disableControls() {
  for (let selector of arguments) {
    document.querySelector(selector).disabled = true; // control -> disabled
  }
}


/* –í–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –ø–æ—Å–ª–µ 'Game over') */
function enableControls() {
  for (let selector of arguments) {
    document.querySelector(selector).disabled = false; // control -> enabled
  }
}


/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –≤ —Å–≤–æ–±–æ–¥–Ω—É—é –æ—Ç –Ω–µ–≥–æ –æ–±–ª–∞—Å—Ç—å
 */
window.onclick = function(event) {
  if (event.target == modal) {
    closeModal();
  }
}


/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ –∫–ª–∞–≤–∏—à–µ ESC (escape)
 */
document.onkeydown = function(evt) {
  evt = evt || window.event;
  let isEscape = false;
  if ('key' in evt) {
    isEscape = (evt.key === 'Escape' || evt.key === 'Esc');
  } else {
    isEscape = (evt.keyCode === 27);
  }
  if (isEscape) {
    closeModal();
  }
};


/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */
function showModal(title, htmlContent) {
  modalTitle.innerHTML = title;
  modalContent.innerHTML = htmlContent;
  modal.style.display = 'flex';
}


/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */
function closeModal() {
  modal.style.display = 'none';
}


/*********
 * UTILS *
 *********/

/**
 * –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–ª–∞–≤–Ω–æ–π (–ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å—Ç—Ä–æ–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä [UPPERCASE]).
 * @param str –°—Ç—Ä–æ–∫–∞, –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω–æ–π.
 */
function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}


/**
 * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
